<?php/* * Overwite of core shipping module, need to add something in backend to enable this. *//** * Description of Shipping * * @author dustinmiller */class ServU_Shipping_Model_Shipping    extends Mage_Shipping_Model_Shipping{        public function collectRates(Mage_Shipping_Model_Rate_Request $request)    {        //This is real ugly and convuluted, need a more oop approach for sorting         //this out        $storeId = $request->getStoreId();        if (!$request->getOrig()) {            $request                ->setCountryId(Mage::getStoreConfig(self::XML_PATH_STORE_COUNTRY_ID, $request->getStore()))                ->setRegionId(Mage::getStoreConfig(self::XML_PATH_STORE_REGION_ID, $request->getStore()))                ->setCity(Mage::getStoreConfig(self::XML_PATH_STORE_CITY, $request->getStore()))                ->setPostcode(Mage::getStoreConfig(self::XML_PATH_STORE_ZIP, $request->getStore()));        }                $items = Mage::getModel('checkout/session')->getQuote()->getAllItems();        $supplierInstance = Mage::getModel('sd_dropship/supplier');        $sortedArray = array();        $sortedFreeItems = array();        $configureQty = -5;        foreach($items as $item) {            if($item->getProductType() === 'configurable') {                $configureQty = $item->getQty();                continue;            }            //this is a dangerous assumption that the configurable product            //will always precede it's child, quick fix;            if($configureQty > 0) {                $qtyReset = $configureQty;                $configureQty = -5;            } else {                $qtyReset = $item->getQty();            }            if($item->getProduct()->getData('supplier')) {                $supplierPostalCode = $supplierInstance->loadFromAttribute('supplier', $item->getProduct()->getData('supplier'), $storeId)->getZipCode();                if($supplierPostalCode == '' || !$supplierPostalCode) {                    $supplierPostalCode = $request->getPostcode();                }            } else {                $supplierPostalCode = $request->getPostcode();            }            if($item->getProduct()->getStockItem()->getQty() >= $qtyReset) {                $item->setQty($qtyReset);                if($item->getProduct()->getAttributeText('free_shipping') == 'Yes') {                    $sortedFreeItems[$request->getPostcode()][] = $item;                } else {                    $sortedArray[$request->getPostcode()][] = $item;                }              } else {                if($item->getProduct()->getStockItem()->getQty() > 0){                    $clonedItem = clone $item;                    $qtyReset = $qtyReset - $item->getProduct()->getStockItem()->getQty();                    $clonedItem->setQty($clonedItem->getProduct()->getStockItem()->getQty());                    if($clonedItem->getProduct()->getAttributeText('free_shipping') == 'Yes') {                        $sortedFreeItems[$request->getPostcode()][] = $clonedItem;                    } else {                        $sortedArray[$request->getPostcode()][] = $clonedItem;                    }                     }                $item->setQty($qtyReset);                                if($item->getProduct()->getAttributeText('free_shipping') == 'Yes') {                    $sortedFreeItems[$supplierPostalCode][] = $item;                } else {                    $sortedArray[$supplierPostalCode][] = $item;                }                             }        }        $this->sendRates($request, $sortedArray);        $this->sendRates($request, $sortedFreeItems, true);        $allRates = $this->getResult()->getAllRates();                foreach ($allRates as $rate) {            if (get_class($rate) == 'Mage_Shipping_Model_Rate_Result_Error') {                $this->getResult()->reset();                $this->getResult()->append($rate);                return $this;            }        }        $this->consolidateRates();                    return $this;    }    protected function sendRates(Mage_Shipping_Model_Rate_Request $request ,        $sortedArray, $freeRates = false) {        $upsCarrier = $this->getCarrierByCode('ups', $request->getStoreId());        $conwayCarrier = $this->getCarrierByCode('conway', $request->getStoreId());        $cmdtClass = $conwayCarrier->getConfigData('freight_class');         foreach($sortedArray as $key => $itemsByZip) {            $zipweight = 0;            $freightableItem = false;            foreach($itemsByZip as $item) {                if($item->getWeight() == 0) {                    $item->setWeight(1);                }                if($item->getProductType() == 'grouped') {                    $zipweight += $item->getRowWeight() * $item->getQty();                } else {                    $zipweight += $item->getWeight() * $item->getQty();                }                                if($item->getWeight() >= $conwayCarrier->getConfigData('item_weight') || $item->getProduct()->getAttributeText('always_truck') == 'Yes') {                    $freightableItem = true;                }                if((int)$cmdtClass < (int)$item->getProduct()->getData('freight_class')) {                   $cmdtClass = $item->getProduct()->getData('freight_class');                }            }                        if($zipweight >= $upsCarrier->getConfigData('max_package_weight') || $freightableItem) {                $conwayCarrier->setZipcodeSpecificRequest($zipweight, $cmdtClass, $key);                               $result = $conwayCarrier->collectRates($request);                                if ($result->getError()) {                    $this->getResult()->append($result);                                       return $this;                }                               if ($freeRates) {                    $result->getCheapestRate()->setPrice($result->getCheapestRate()->getNotify() +                            $result->getCheapestRate()->getLiftGate() + $result->getCheapestRate()->getResidence());                }                               $this->getResult()->append($result);                                 if ($result->getError()) {                                     return $this;                }            } else {                 $upsCarrier->setZipcodeSpecificRequest($itemsByZip, $key);                $result = $upsCarrier->collectRates($request);                                    if ($result->getError()) {                    $this->getResult()->append($result);                                       return $this;                }                if ($freeRates) {                    $result->getCheapestRate()->setPrice(0.00);                } else if($result->getCheapestRate()->getCost() > $upsCarrier->getConfigData('quote_threshold'))                {                    $conwayCarrier->setZipcodeSpecificRequest($zipweight, $cmdtClass, $key);                     $conwayComparableQuote = $conwayCarrier->collectRates($request);                                      if($conwayComparableQuote->getCheapestRate()->getPrice() < $result->getCheapestRate()->getPrice())                    {                        $result = $conwayComparableQuote;                    }                }                                $this->getResult()->append($result);            }                  }    }        protected function consolidateRates() {              $allRates = $this->getResult()->getAllRates();               $rates = array();        $consolRates = array();        $confirmationNumbers = array();        $conwayShipments = 0;        foreach ($allRates as $rate) {                      if($rate->getCarrier() == 'conway') {                $conwayShipments++;            }            if($rate->getCarrier() == 'ups') {                Mage::getSingleton('core/session')->setUpsShipments(true);            }                        if (!isset($rates[$rate->getCarrier()]['title'])) {                $rates[$rate->getCarrier()]['title'] = $rate->getCarrierTitle();            }                       if (!isset($rates[$rate->getCarrier()]['methods'][$rate->getMethod()])) {                $rates[$rate->getCarrier()]['methods'][$rate->getMethod()] = array(                    'title'=>$rate->getMethodTitle(),                    'price'=>$rate->getPrice(),                    'cost' =>$rate->getCost(),                );                              if($rate->getConfirmationNumber()) {                    $confirmationNumbers[] = (string)$rate->getConfirmationNumber();                }             } else {                               $rates[$rate->getCarrier()]['methods'][$rate->getMethod()]['price']                         = $rates[$rate->getCarrier()]['methods'][$rate->getMethod()]['price']                             + $rate->getPrice();                               $rates[$rate->getCarrier()]['methods'][$rate->getMethod()]['cost']                         = $rates[$rate->getCarrier()]['methods'][$rate->getMethod()]['cost']                             + $rate->getCost();                if($rate->getConfirmationNumber()) {                    $confirmationNumbers[] = (string)$rate->getConfirmationNumber();                }            }            if (!isset($rates[$rate->getCarrier()]['title'])) {                $rates[$rate->getCarrier()]['title'] = $rate->getCarrierTitle();            }                   }               Mage::getSingleton('core/session')->setConwayShipments($conwayShipments);                if(count($confirmationNumbers) > 0){            Mage::register('servu_shipping_model_shipping_confirmation', $confirmationNumbers);        }        else {            Mage::register('servu_shipping_model_shipping_confirmation', 'No Numbers');        }                       if(array_key_exists('ups', $rates) && array_key_exists('conway', $rates)) {            $consolRates['ups']['title'] =                Mage::getModel('ServU_Shipping_Model_Carrier_Ups')->getConfigData('title') . ' w/ ' .                Mage::getModel('ServU_Shipping_Model_Carrier_Conway')->getConfigData('title');            $consolRates['ups']['methods']['03']['price'] =                $rates['ups']['methods']['03']['price'] +                $rates['conway']['methods']['freight']['price'];            $consolRates['ups']['methods']['01']['price'] =                $rates['ups']['methods']['01']['price'] +                $rates['conway']['methods']['freight']['price'];            $consolRates['ups']['methods']['03']['cost'] =                $rates['ups']['methods']['03']['cost'] +                $rates['conway']['methods']['freight']['cost'];            $consolRates['ups']['methods']['01']['cost'] =                $rates['ups']['methods']['01']['cost'] +                $rates['conway']['methods']['freight']['cost'];            $consolRates['ups']['methods']['03']['title'] =                $rates['ups']['methods']['03']['title'] . ' w/ ' .                $rates['conway']['methods']['freight']['title'];            $consolRates['ups']['methods']['01']['title'] =                $rates['ups']['methods']['01']['title'] . ' w/ ' .                $rates['conway']['methods']['freight']['title'];        } else {            $consolRates = $rates;        }                $this->getResult()->reset();        foreach ($consolRates as $key=>$value) {            foreach($value['methods'] as $method=>$value2 ) {                $accessorials = $this->getAccessorials();                $price = round($value2['price'], 2);                if(count($accessorials) > 0) {                    if (in_array("s_extra_residence", $accessorials) && Mage::getSingleton('core/session')->getUpsShipments()) {                        $price = $price + Mage::getStoreConfig('carriers/ups/residence_delivery_charge');                    }                }                $rate = Mage::getModel('shipping/rate_result_method');                $rate->setCarrier($key);                   $rate->setCarrierTitle($value['title']);                $rate->setMethod($method);                $rate->setMethodTitle($value2['title']);                $rate->setCost($value2['cost']);                $rate->setPrice($price);                $this->getResult()->append($rate);            }        }    }        public function getAccessorials() {        return Mage::getSingleton('core/session')->getAccessorials();;    }        public function getAccessorialsPricing() {                $residencePrice = Mage::getStoreConfig('carriers/conway/residence_delivery_charge') * Mage::getSingleton('core/session')->getConwayShipments();                if (Mage::getSingleton('core/session')->getUpsShipments()) {            $residencePrice += Mage::getStoreConfig('carriers/ups/residence_delivery_charge');        }                $accessorialPrices = array();        $accessorialPrices['lfg'] = Mage::getStoreConfig('carriers/conway/lift_gate_charge') * Mage::getSingleton('core/session')->getConwayShipments();        $accessorialPrices['notify'] = Mage::getStoreConfig('carriers/conway/pre_notify_charge') * Mage::getSingleton('core/session')->getConwayShipments();        $accessorialPrices['residence'] = $residencePrice;                Mage::getSingleton('core/session')->unsConwayShipments();        Mage::getSingleton('core/session')->unsUpsShipments();                return $accessorialPrices;    }}?>