<?php/* * To change this template, choose Tools | Templates * and open the template in the editor. *//** * Description of Ups * * @author dustinmiller */class ServU_Shipping_Model_Carrier_Ups    extends Mage_Usa_Model_Shipping_Carrier_Ups{    protected $_weightOfShipment = null;    protected $_packagesSortedByZip = null;    protected $_orginatingZip = null;        public function setZipcodeSpecificRequest($itemsByZip, $key)    {       $this->_originatingZip = $key;       $this->_packagesSortedByZip = $itemsByZip;    }        public function setRequest(Mage_Shipping_Model_Rate_Request $request)    {        $this->_request = $request;        $r = new Varien_Object();        $r->setStoreId();                if ($request->getLimitMethod()) {            $r->setAction($this->getCode('action', 'single'));            $r->setProduct($request->getLimitMethod());        } else {            $r->setAction($this->getCode('action', 'all'));            $r->setProduct('GND'.$this->getConfigData('dest_type'));        }        if ($request->getUpsPickup()) {            $pickup = $request->getUpsPickup();        } else {            $pickup = $this->getConfigData('pickup');        }        $r->setPickup($this->getCode('pickup', $pickup));        if ($request->getUpsContainer()) {            $container = $request->getUpsContainer();        } else {            $container = $this->getConfigData('container');        }        $r->setContainer($this->getCode('container', $container));        if ($request->getUpsDestType()) {            $destType = $request->getUpsDestType();        } else {            $destType = $this->getConfigData('dest_type');        }        $r->setDestType($this->getCode('dest_type', $destType));        if ($request->getOrigCountry()) {            $origCountry = $request->getOrigCountry();        } else {            $origCountry = Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_COUNTRY_ID,                $request->getStoreId()            );        }        $r->setOrigCountry(Mage::getModel('directory/country')->load($origCountry)->getIso2Code());        if ($request->getOrigRegionCode()) {            $origRegionCode = $request->getOrigRegionCode();        } else {            $origRegionCode = Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_REGION_ID,                $request->getStoreId()            );        }        if (is_numeric($origRegionCode)) {            $origRegionCode = Mage::getModel('directory/region')->load($origRegionCode)->getCode();        }        $r->setOrigRegionCode($origRegionCode);        if ($request->getOrigPostcode()) {            $r->setOrigPostal($request->getOrigPostcode());        } else {            $r->setOrigPostal(Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_ZIP,                $request->getStoreId()            ));        }        if ($request->getOrigCity()) {            $r->setOrigCity($request->getOrigCity());        } else {            $r->setOrigCity(Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_CITY,                $request->getStoreId()            ));        }        if ($request->getDestCountryId()) {            $destCountry = $request->getDestCountryId();        } else {            $destCountry = self::USA_COUNTRY_ID;        }        //for UPS, puero rico state for US will assume as puerto rico country        if ($destCountry == self::USA_COUNTRY_ID            && ($request->getDestPostcode()=='00912' || $request->getDestRegionCode()==self::PUERTORICO_COUNTRY_ID)        ) {            $destCountry = self::PUERTORICO_COUNTRY_ID;        }        // For UPS, Guam state of the USA will be represented by Guam country        if ($destCountry == self::USA_COUNTRY_ID && $request->getDestRegionCode() == self::GUAM_REGION_CODE) {            $destCountry = self::GUAM_COUNTRY_ID;        }        $r->setDestCountry(Mage::getModel('directory/country')->load($destCountry)->getIso2Code());        $r->setDestRegionCode($request->getDestRegionCode());        if ($request->getDestPostcode()) {            $r->setDestPostal($request->getDestPostcode());        } else {        }        if ($request->getFreeMethodWeight()!=$request->getPackageWeight()) {            $r->setFreeMethodWeight($request->getFreeMethodWeight());        }        $r->setValue($request->getPackageValue());        $r->setValueWithDiscount($request->getPackageValueWithDiscount());        if ($request->getUpsUnitMeasure()) {            $unit = $request->getUpsUnitMeasure();        } else {            $unit = $this->getConfigData('unit_of_measure');        }        $r->setUnitMeasure($unit);        $r->setIsReturn($request->getIsReturn());        $this->_rawRequest = $r;        return $this;    }        protected function _getXmlQuotes()    {        $url = $this->getConfigData('gateway_xml_url');        $this->setXMLAccessRequest();        $xmlRequest=$this->_xmlAccessRequest;        $r = $this->_rawRequest;        $params = array(            'accept_UPS_license_agreement' => 'yes',            '10_action'      => $r->getAction(),            '14_origCountry' => $r->getOrigCountry(),            '15_origPostal'  => $r->getOrigPostal(),            'origCity'       => $r->getOrigCity(),            'origRegionCode' => $r->getOrigRegionCode(),            '19_destPostal'  => Mage_Usa_Model_Shipping_Carrier_Abstract::USA_COUNTRY_ID == $r->getDestCountry() ?                substr($r->getDestPostal(), 0, 5) :                $r->getDestPostal(),            '22_destCountry' => $r->getDestCountry(),            'destRegionCode' => $r->getDestRegionCode(),            '47_rate_chart'  => $r->getPickup(),            '48_container'   => $r->getContainer(),            '49_residential' => $r->getDestType(),        );        if ($params['10_action'] == '4') {            $params['10_action'] = 'Shop';            $serviceCode = null; // Service code is not relevant when we're asking ALL possible services' rates        } else {            $params['10_action'] = 'Rate';            $serviceCode = $r->getProduct() ? $r->getProduct() : '';        }        $serviceDescription = $serviceCode ? $this->getShipmentByCode($serviceCode) : '';$xmlRequest .= <<< XMLRequest<?xml version="1.0"?><RatingServiceSelectionRequest xml:lang="en-US">  <Request>    <TransactionReference>      <CustomerContext>Rating and Service</CustomerContext>      <XpciVersion>1.0</XpciVersion>    </TransactionReference>    <RequestAction>Rate</RequestAction>    <RequestOption>{$params['10_action']}</RequestOption>  </Request>  <PickupType>          <Code>{$params['47_rate_chart']['code']}</Code>          <Description>{$params['47_rate_chart']['label']}</Description>  </PickupType>  <Shipment>XMLRequest;        if ($serviceCode !== null) {            $xmlRequest .= "<Service>" .                "<Code>{$serviceCode}</Code>" .                "<Description>{$serviceDescription}</Description>" .                "</Service>";        }      $xmlRequest .= <<< XMLRequest      <Shipper>XMLRequest;        if ($this->getConfigFlag('negotiated_active') && ($shipper = $this->getConfigData('shipper_number')) ) {            $xmlRequest .= "<ShipperNumber>{$shipper}</ShipperNumber>";        }        if ($r->getIsReturn()) {            $shipperCity = '';            $shipperPostalCode = $params['19_destPostal'];            $shipperCountryCode = $params['22_destCountry'];            $shipperStateProvince = $params['destRegionCode'];        } else {            $shipperCity = $params['origCity'];            $shipperPostalCode = $params['15_origPostal'];            $shipperCountryCode = $params['14_origCountry'];            $shipperStateProvince = $params['origRegionCode'];        }$xmlRequest .= <<< XMLRequest      <Address>          <City>{$shipperCity}</City>          <PostalCode>{$shipperPostalCode}</PostalCode>          <CountryCode>{$shipperCountryCode}</CountryCode>          <StateProvinceCode>{$shipperStateProvince}</StateProvinceCode>      </Address>    </Shipper>    <ShipTo>      <Address>          <PostalCode>{$params['19_destPostal']}</PostalCode>          <CountryCode>{$params['22_destCountry']}</CountryCode>          <ResidentialAddress>{$params['49_residential']}</ResidentialAddress>          <StateProvinceCode>{$params['destRegionCode']}</StateProvinceCode>XMLRequest;          $xmlRequest .= ($params['49_residential']==='01'                  ? "<ResidentialAddressIndicator>{$params['49_residential']}</ResidentialAddressIndicator>"                  : ''          );$xmlRequest .= <<< XMLRequest      </Address>    </ShipTo> XMLRequest;$currentItem = $this->_packagesSortedByZip[0]->getProduct();$supplierInstance = Mage::getModel('sd_dropship/supplier');if ($currentItem->getData('supplier') &&        $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getZipCode() &&        $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getCity() &&        $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getState() &&        $this->_originatingZip == $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getZipCode()) {        $city = $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getCity();    $state = $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getState();    $zipCode = $supplierInstance->loadFromAttribute('supplier',                         $currentItem->getData('supplier'),                         $r->getStoreId())->getZipCode();} else {    $city = $shipperCity;    $state = $shipperStateProvince;    $zipCode = $shipperPostalCode;}$xmlRequest .= <<< XMLRequest    <ShipFrom>      <Address>          <City>{$city}</City>          <StateProvinceCode>{$state}</StateProvinceCode>          <PostalCode>{$zipCode}</PostalCode>      </Address>    </ShipFrom>XMLRequest;      $itemsPerPackage = 0;      $carriedOverWeight = 0;      $packageThreshold = $this->getConfigData('package_weight');      usort($this->_packagesSortedByZip, array($this, "cmp"));            foreach($this->_packagesSortedByZip as $item) {        $itemsPerPackage = $packageThreshold / $item->getWeight();        //Mage::log('Ship22:' . $item->getProduct()->getAttributeText('ship_alone'));        $dimensionalWeight = ($item->getProduct()->getData('height') * $item->getProduct()->getData('width') * $item->getProduct()->getData('length')) / 139;                    if($itemsPerPackage <= 1 || $item->getProduct()->getAttributeText('ship_alone') == "Yes" || $dimensionalWeight > $item->getWeight()) {            for ($i = 1; $i <= $item->getQty(); $i++) {                if($item->getProduct()->getAttributeText('ship_alone') == "Yes" &&                        $item->getProduct()->getData('height') != '' &&                        $item->getProduct()->getData('width') != '' &&                        $item->getProduct()->getData('length') != ''                        || $dimensionalWeight > $item->getWeight()){$xmlRequest .= <<< XMLRequest   <Package>      <PackagingType><Code>{$params['48_container']}</Code></PackagingType>      <Dimensions>            <Width>{$item->getProduct()->getData('width')}</Width>            <Height>{$item->getProduct()->getData('height')}</Height>            <Length>{$item->getProduct()->getData('length')}</Length>      </Dimensions>      <PackageWeight>         <UnitOfMeasurement><Code>{$r->getUnitMeasure()}</Code></UnitOfMeasurement>        <Weight>{$item->getWeight()}</Weight>      </PackageWeight>    </Package>XMLRequest;                                    }                else {$xmlRequest .= <<< XMLRequest    <Package>      <PackagingType><Code>{$params['48_container']}</Code></PackagingType>      <PackageWeight>         <UnitOfMeasurement><Code>{$r->getUnitMeasure()}</Code></UnitOfMeasurement>        <Weight>{$item->getWeight()}</Weight>      </PackageWeight>    </Package>XMLRequest;                }            }        }        else {            $itemsLefttoPackage = $item->getQty();                        while ($itemsLefttoPackage > 0) :                //we have items left from previous item to package                //they are going to be packaged with some of these item(s) if possible                if($carriedOverWeight > 0)                {                    $weightToFillPackage = $packageThreshold - $carriedOverWeight;                    $itemsThatCanBePackaged = $weightToFillPackage / $item->getWeight();                                        if ($itemsThatCanBePackaged >= 1)                    {                        if($itemsThatCanBePackaged > $itemsLefttoPackage)                        {                            $weight = ($itemsLefttoPackage * $item->getWeight()) + $carriedOverWeight;                        }                        else                        {                            $weight = ($itemsThatCanBePackaged * $item->getWeight()) + $carriedOverWeight;                        }                                                $itemsLefttoPackage = $itemsLefttoPackage - $itemsThatCanBePackaged;                                                if($weight < $packageThreshold && $itemsLefttoPackage <= 0)                        {                            $carriedOverWeight = $weight;                         }                        else                        {                            $weight = $this->_checkWeight($weight);$xmlRequest .= <<< XMLRequest   <Package>      <PackagingType><Code>{$params['48_container']}</Code></PackagingType>      <PackageWeight>        <UnitOfMeasurement><Code>{$r->getUnitMeasure()}</Code></UnitOfMeasurement>        <Weight>{$weight}</Weight>      </PackageWeight>    </Package>XMLRequest;                            $carriedOverWeight = 0;                          }                    }                    else                     {                        $weight = $carriedOverWeight;                        $weight = $this->_checkWeight($weight);$xmlRequest .= <<< XMLRequest   <Package>      <PackagingType><Code>{$params['48_container']}</Code></PackagingType>      <PackageWeight>        <UnitOfMeasurement><Code>{$r->getUnitMeasure()}</Code></UnitOfMeasurement>        <Weight>{$weight}</Weight>      </PackageWeight>    </Package>XMLRequest;                        $carriedOverWeight = 0;                    }                                                       }                //we have more than one iteration to go through                else if($itemsLefttoPackage >= $itemsPerPackage){                    $weight = $item->getWeight() * $itemsPerPackage;                    $weight = $this->_checkWeight($weight);$xmlRequest .= <<< XMLRequest   <Package>      <PackagingType><Code>{$params['48_container']}</Code></PackagingType>      <PackageWeight>        <UnitOfMeasurement><Code>{$r->getUnitMeasure()}</Code></UnitOfMeasurement>        <Weight>{$weight}</Weight>      </PackageWeight>    </Package>XMLRequest;                    $itemsLefttoPackage = $itemsLefttoPackage - $itemsPerPackage;                }                //we have less items to package than are required to fill a package                //get the weight of the remainder then carry over to next item iteration                //we could end up having issues with rounding the weight                else {                    $carriedOverWeight = $item->getWeight() * $itemsLefttoPackage;                    $itemsLefttoPackage = 0;                }                            endwhile;                    }              }              if($carriedOverWeight > 0)        {            $carriedOverWeight = $this->_checkWeight($carriedOverWeight);$xmlRequest .= <<< XMLRequest   <Package>      <PackagingType><Code>{$params['48_container']}</Code></PackagingType>      <PackageWeight>        <UnitOfMeasurement><Code>{$r->getUnitMeasure()}</Code></UnitOfMeasurement>        <Weight>{$carriedOverWeight}</Weight>      </PackageWeight>    </Package>XMLRequest;            $carriedOverWeight = 0;        }                if ($this->getConfigFlag('negotiated_active')) {            $xmlRequest .= "<RateInformation><NegotiatedRatesIndicator/></RateInformation>";        }$xmlRequest .= <<< XMLRequest  </Shipment></RatingServiceSelectionRequest>XMLRequest;        Mage::log($xmlRequest);        $xmlResponse = $this->_getCachedQuotes($xmlRequest);        if ($xmlResponse === null) {            $debugData = array('request' => $xmlRequest);            try {                $ch = curl_init();                curl_setopt($ch, CURLOPT_URL, $url);                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);                curl_setopt($ch, CURLOPT_HEADER, 0);                curl_setopt($ch, CURLOPT_POST, 1);                curl_setopt($ch, CURLOPT_POSTFIELDS, $xmlRequest);                curl_setopt($ch, CURLOPT_TIMEOUT, 30);                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, (boolean)$this->getConfigFlag('mode_xml'));                $xmlResponse = curl_exec($ch);                                $debugData['result'] = $xmlResponse;                $this->_setCachedQuotes($xmlRequest, $xmlResponse);            }            catch (Exception $e) {                $debugData['result'] = array('error' => $e->getMessage(), 'code' => $e->getCode());                $xmlResponse = '';            }            $this->_debug($debugData);        }        //Mage::log($xmlResponse);        return $this->_parseXmlResponse($xmlResponse);    }        protected function _checkWeight($weight) {        if($weight < 0.1) {            $weight = 0.1;        }        return $weight;    }        protected function _parseXmlResponse($xmlResponse)    {        $costArr = array();                $priceArr = array();        if (strlen(trim($xmlResponse))>0) {            $xml = new Varien_Simplexml_Config();            $xml->loadString($xmlResponse);            $arr = $xml->getXpath("//RatingServiceSelectionResponse/Response/ResponseStatusCode/text()");            $success = (int)$arr[0];            if ($success === 1) {                $arr = $xml->getXpath("//RatingServiceSelectionResponse/RatedShipment");                $allowedMethods = explode(",", $this->getConfigData('allowed_methods'));                // Negotiated rates                $negotiatedArr = $xml->getXpath("//RatingServiceSelectionResponse/RatedShipment/NegotiatedRates");                $negotiatedActive = $this->getConfigFlag('negotiated_active')                    && $this->getConfigData('shipper_number')                    && !empty($negotiatedArr);                $allowedCurrencies = Mage::getModel('directory/currency')->getConfigAllowCurrencies();                foreach ($arr as $shipElement){                    $code = (string)$shipElement->Service->Code;                    if (in_array($code, $allowedMethods)) {                        if ($negotiatedActive) {                            $cost = $shipElement->NegotiatedRates->NetSummaryCharges->GrandTotal->MonetaryValue;                             } else {                            $cost = $shipElement->TotalCharges->MonetaryValue;                        }                        //convert price with Origin country currency code to base currency code                        $successConversion = true;                        $responseCurrencyCode = (string) $shipElement->TotalCharges->CurrencyCode;                        if ($responseCurrencyCode) {                            if (in_array($responseCurrencyCode, $allowedCurrencies)) {                                $cost = (float) $cost * $this->_getBaseCurrencyRate($responseCurrencyCode);                            } else {                                $errorTitle = Mage::helper('directory')                                    ->__('Can\'t convert rate from "%s-%s".',                                        $responseCurrencyCode,                                        $this->_request->getPackageCurrency()->getCode());                                $error = Mage::getModel('shipping/rate_result_error');                                $error->setCarrier('ups');                                $error->setCarrierTitle($this->getConfigData('title'));                                $error->setErrorMessage($errorTitle);                                $successConversion = false;                            }                        }                        if ($successConversion) {                            $costArr[$code] = $cost;                            $priceArr[$code] = $this->getMethodPrice(floatval($cost),$code);                        }                    }                }            } else {                $arr = $xml->getXpath("//RatingServiceSelectionResponse/Response/Error/ErrorDescription/text()");                $errorTitle = (string)$arr[0][0];                $error = Mage::getModel('shipping/rate_result_error');                $error->setCarrier('ups');                $error->setCarrierTitle($this->getConfigData('title'));                $error->setData('error_message', $errorTitle);                $error->getErrorMessage();            }        }        $result = Mage::getModel('shipping/rate_result');        //$defaults = $this->getDefaults();        if (empty($priceArr)) {            if(!$error instanceof Mage_Shipping_Model_Rate_Result_Error) {                $error = Mage::getModel('shipping/rate_result_error');                $error->setCarrier('ups');                $error->setCarrierTitle($this->getConfigData('title'));                if(!isset($errorTitle)){                    $errorTitle = Mage::helper('usa')->__('Cannot retrieve shipping rates');                }                $error->setErrorMessage($this->getConfigData('specificerrmsg'));            }            $result->append($error);        } else {            foreach ($priceArr as $method=>$price) {                $rate = Mage::getModel('shipping/rate_result_method');                $rate->setCarrier('ups');                $rate->setCarrierTitle($this->getConfigData('title'));                $rate->setMethod($method);                $method_arr = $this->getShipmentByCode($method);                $rate->setMethodTitle($method_arr);                $rate->setCost($costArr[$method]);                $markedPrice = $price + round(($price *                 ((float)$this->getConfigData('optional_ups_markup') * 0.01)), 2);                $rate->setPrice($markedPrice);                $result->append($rate);            }        }        return $result;    }        protected function cmp($a, $b)    {           if(  $a->getWeight() ==  $b->getWeight() ){ return 0 ; }         return ($a->getWeight() < $b->getWeight()) ? -1 : 1;    }   }?>