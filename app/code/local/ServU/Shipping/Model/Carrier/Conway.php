<?phpclass ServU_Shipping_Model_Carrier_Conway     extends Mage_Shipping_Model_Carrier_Abstract	implements Mage_Shipping_Model_Carrier_Interface{    /**     * Code of the carrier     *     * @var string     */    const CODE = 'conway';    /**     * Code of the carrier     *     * @var string     */        protected $_code = self::CODE;    /**     * Rate request data     *     * @var Mage_Shipping_Model_Rate_Request|null     */    protected $_request = null;    /**     * Raw rate request data     *     * @var Varien_Object|null     */    protected $_rawRequest = null;    /**     * Rate result data     *     * @var Mage_Shipping_Model_Rate_Result|null     */    protected $_result = null;    /**     * Xml access request     *     * @var string     */    protected $_xmlAccessRequest = null;    /**     *Items collection from cart     *      * @var array      */    protected $_items = null;    /**     * Collect and get rates     *     * @param Mage_Shipping_Model_Rate_Request $request     * @return Mage_Shipping_Model_Rate_Result|bool|null     */    protected $_weightOfShipment = null;    protected $_freightClassofShipment = null;    protected $_originatingZip = null;    public function collectRates(Mage_Shipping_Model_Rate_Request $request)    {        if (!$this->getConfigFlag('active')) {            //Mage::log('Serv-U Shipping is not activated');            return false;        }        $this->setRequest($request);        $this->_result = $this->_getQuotes();        return $this->getResult();    }    public function setZipcodeSpecificRequest($zipweight, $cmdtClass, $key)    {        $this->_weightOfShipment = round($zipweight, 0);        $this->_freightClassofShipment = $cmdtClass;        $this->_originatingZip = $key;        //Mage::log($this->_freightClassofShipment);        //Mage::log($cmdtClass);    }    /**     * Prepare and set request to this instance     *     * @param Mage_Shipping_Model_Rate_Request $request     * @return Mage_Usa_Model_Shipping_Carrier_Ups     */    public function setRequest(Mage_Shipping_Model_Rate_Request $request)    {        $this->_request = $request;        $r = new Varien_Object();        if ($request->getOrigCountry()) {            $origCountry = $request->getOrigCountry();        } else {            $origCountry = Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_COUNTRY_ID,                $request->getStoreId()            );        }        $r->setOrigCountry(Mage::getModel('directory/country')->load($origCountry)->getIso2Code());        if ($request->getOrigRegionCode()) {            $origRegionCode = $request->getOrigRegionCode();        } else {            $origRegionCode = Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_REGION_ID,                $request->getStoreId()            );        }        if (is_numeric($origRegionCode)) {            $origRegionCode = Mage::getModel('directory/region')->load($origRegionCode)->getCode();        }        $r->setOrigRegionCode($origRegionCode);        if ($request->getOrigPostcode()) {            $r->setOrigPostal($request->getOrigPostcode());        } else {            $r->setOrigPostal(Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_ZIP,                $request->getStoreId()            ));        }        if ($request->getOrigCity()) {            $r->setOrigCity($request->getOrigCity());        } else {            $r->setOrigCity(Mage::getStoreConfig(                Mage_Shipping_Model_Shipping::XML_PATH_STORE_CITY,                $request->getStoreId()            ));        }        if ($request->getDestCountryId()) {            $destCountry = $request->getDestCountryId();        } else {            $destCountry = self::USA_COUNTRY_ID;        }        $r->setDestCountry(Mage::getModel('directory/country')->load($destCountry)->getIso2Code());        $r->setDestRegionCode($request->getDestRegionCode());        if ($request->getDestPostcode()) {            $r->setDestPostal($request->getDestPostcode());        } else {        }        $r->setValue($request->getPackageValue());        $r->setValueWithDiscount($request->getPackageValueWithDiscount());        $r->setIsReturn($request->getIsReturn());        $this->_rawRequest = $r;        return $this;    }    /**     * Get result of request     *     * @return mixed     */    public function getResult()    {       return $this->_result;    }    /**     * Do remote request for  and handle errors     *     * @return Mage_Shipping_Model_Rate_Result     */    protected function _getQuotes()    {        return $this->_getConwayXmlQuote(); //results array sum;    }    /**    * Get xml rates     *     * @return Mage_Shipping_Model_Rate_Result     */    protected function _getConwayXmlQuote()    {        $today = date("m/d/y");        $url = $this->getConfigData('conway_xml_gateway_url');	//These last three fields have been encrypted on the frontend of the admin, how do I decrypt	$customer_number = $this->getConfigData('conway_customer_number');	$user_name = $this->getConfigData('conway_username');	$password = $this->getConfigData('conway_password');        //if($this->_freightClassofShipment === '' || (int)$this->_freightClassofShipment < (int)$this->getConfigData('freight_class')){            //$this->_freightClassofShipment = $this->getConfigData('freight_class');        //}        $r = $this->_rawRequest;     	$destinationZip  = Mage_Usa_Model_Shipping_Carrier_Abstract::USA_COUNTRY_ID == $r->getDestCountry() ?                substr($r->getDestPostal(), 0, 5) :                $r->getDestPostal();	$requestType = "RateRequest";        $xmlRequest = new SimpleXMLElement('<RateRequest></RateRequest>');        $originZip = $xmlRequest->addChild('OriginZip', $this->_originatingZip);;        $originZip->addAttribute('country', 'us');        $destinationZip = $xmlRequest->addChild('DestinationZip', $destinationZip);        $destinationZip->addAttribute('country', 'us');        $customerNumber = $xmlRequest->addChild('CustNmbr', $customer_number);        $customerNumber->addAttribute('shipcode', $this->getConfigData('ship_code')); //Need a drop down in system config for this        $xmlRequest->addChild('ChargeCode', 'P');        $xmlRequest->addChild('EffectiveDate', $today);        $sxeItem = $xmlRequest->addChild('Item'); 	$palletWeight = ($this->getConfigData('pallet_weight') * ceil($this->_weightOfShipment / $this->getConfigData('pallet_capacity')));        //Mage::log($palletWeight);        //Mage::log($this->_freightClassofShipment);        $sxeItem->addChild('CmdtyClass', $this->_freightClassofShipment);        $sxeItem->addChild('Weight', $this->_weightOfShipment + $palletWeight)->addAttribute('unit', 'lbs');        $session = Mage::getSingleton('core/session');        $accessorials = $session->getAccessorials();                        if(count($accessorials)>0) {            if (in_array("s_extra_notify", $accessorials)) {                $sxeItem = $xmlRequest->addChild('Accessorial', 'DNC');            }            if (in_array("s_extra_lfg", $accessorials)) {                $sxeItem = $xmlRequest->addChild('Accessorial', 'DLG');            }                        if (in_array("s_extra_residence", $accessorials)) {                $sxeItem = $xmlRequest->addChild('Accessorial', 'RSD');            }        }                //To get custom attributes you must make this avaiable in the config file        //After this is done, you can retrieve them as usual ex:        //productId->getData('attribute_code') <- This is if your attribute is regular         //productId->getAttributeText(attribute_code) <- This is if your attribute is a pull down with options		        //List out all the available methods for the current collection        //$class_methods = get_class_methods($item);        //foreach ($class_methods as $method_name) {        //Mage::log($method_name);        //}        $xmlResponse = null;        $xmlRequest = $xmlRequest->asXml();        //Mage::log($xmlRequest);                 if ($xmlResponse === null) {            $debugData = array('raterequest' => $xmlRequest);        try {            $xmlRequest = urlencode($xmlRequest);             $ch = curl_init($url);            curl_setopt ($ch, CURLOPT_POST, 1);             curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, false);            // May be needed for SSL behind a firewall             curl_setopt ($ch, CURLOPT_HTTPHEADER, array("Content-type: application/x-www-form-urlencoded"));             curl_setopt ($ch, CURLOPT_USERPWD, $user_name.":".$password);             curl_setopt ($ch, CURLOPT_POSTFIELDS, "$requestType=$xmlRequest");             // Parse the XML Response             ob_start();             // prevent the buffer from being displayed             curl_exec($ch);             $xmlResponse = ob_get_contents();             ob_end_clean();             curl_close($ch); // close the connection            $debugData['result'] = $xmlResponse;        }        catch (Exception $e) {            $debugData['result'] = array('error' => $e->getMessage(), 'code' => $e->getCode());            $xmlResponse = '';        }            $this->_debug($debugData);        }        return $this->_parseConwayXmlResponse($xmlResponse);    }    /**     * Prepare shipping rate result based on response     *     * @param mixed $response     * @return Mage_Shipping_Model_Rate_Result	**/    protected function _parseConwayXmlResponse($xmlResponse)    {          //Mage::log($xmlResponse);        $cost = null;        $quoteNumber = 0;        if (strlen(trim($xmlResponse))>0) {            $xml = new Varien_Simplexml_Config();            $xml->loadString($xmlResponse);                        $arr = $xml->getXpath("//RateQuote/Error/text()");            if ($arr=='') {               	$cost = $this->getMethodPrice(floatval($xml->getNode('NetCharge')));                $dlg = $xml->getXpath("//RateQuote/AccessorialCharges/OtherAccessorialCharges[@code='DLG']");                $dnc = $xml->getXpath("//RateQuote/AccessorialCharges/OtherAccessorialCharges[@code='DNC']");                $rsd = $xml->getXpath("//RateQuote/AccessorialCharges/OtherAccessorialCharges[@code='RSD']");                $quoteNumber = $xml->getNode('ConfirmNmbr');            } else {		$errorTitle = (string)$arr;                $error = Mage::getModel('shipping/rate_result_error');                $error->setCarrier('conway');                $error->setCarrierTitle($this->getConfigData('title'));                $error->setErrorMessage($this->getConfigData('specificerrmsg'));            }        }        $result = Mage::getModel('shipping/rate_result');		        if ($cost == null) {            $error = Mage::getModel('shipping/rate_result_error');            $error->setCarrier('conway');            $error->setCarrierTitle($this->getConfigData('title'));                        if(!isset($errorTitle)){                $errorTitle = Mage::helper('shipping')->__('Cannot retrieve shipping rates');            }            $error->setErrorMessage($this->getConfigData('specificerrmsg'));            $result->append($error);        } else {            $rate = Mage::getModel('shipping/rate_result_method');            $rate->setCost($cost);            $rate->setCarrier('conway');            $rate->setCarrierTitle('Conway');            $rate->setMethod('freight');            $rate->setMethodTitle('Standard Freight');            $rate->setConfirmationNumber($quoteNumber);            if((int)$dnc[0] > 0) {                $cost -= (int)$dnc[0];                $dnc = (float)Mage::getStoreConfig('carriers/conway/pre_notify_charge');            }            if((int)$dlg[0] > 0) {                $cost -= (int)$dlg[0];                $dlg = (float)Mage::getStoreConfig('carriers/conway/lift_gate_charge');            }            if($rsd[0]) {                $cost -= (int)$rsd[0];                $rsd = (float)Mage::getStoreConfig('carriers/conway/residence_delivery_charge');            }            $price = $cost + ($cost *                 ((float)$this->getConfigData('optional_conway_markup') * 0.01));            $price += $dnc + $dlg + $rsd;            $rate->setNotify($dnc);            $rate->setLiftGate($dlg);            $rate->setResidence($rsd);            $rate->setPrice($price);                     $result->append($rate);        }                return $result;    }		 /**     * Get allowed shipping methods     *     * @return array     */    public function getAllowedMethods()    {        return array('conway' => $this->getConfigData('name'));    }}